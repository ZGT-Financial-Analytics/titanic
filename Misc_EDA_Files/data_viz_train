# %%
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from pathlib import Path
from scipy import stats
import matplotlib.pyplot as plt
import json
from datetime import datetime

# creating mean difference test function

# paths
from titanic_lab.paths import ROOT, TRAIN_CSV

try:
    from titanic_lab.paths import TEST_CSV  # type: ignore
except Exception:
    TEST_CSV = Path(ROOT) / "data" / "test.csv"
# storage for outputs
OUT_MODELS = Path(ROOT) / "outputs" / "models"
OUT_SUB = Path(ROOT) / "outputs" / "submissions"
OUT_MODELS.mkdir(parents=True, exist_ok=True)
OUT_SUB.mkdir(parents=True, exist_ok=True)

# %%
df_train = pd.read_csv(TRAIN_CSV)


# %%
def create_viz_dataframe_with_reduced_names(df):
    """
    Create a copy of the DataFrame with Name column reduced to Title + Last Name for visualization.

    Examples:
    "Braund, Mr. Owen Harris" → "Mr. Braund"
    "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" → "Mrs. Cumings"
    "Heikkinen, Miss. Laina" → "Miss. Heikkinen"
    """
    df_viz = df.copy()

    def extract_title_lastname(name):
        if pd.isna(name):
            return "Unknown"

        try:
            # Split on comma to get last name and rest
            parts = name.split(", ")
            if len(parts) < 2:
                return name  # Return original if format is unexpected

            last_name = parts[0].strip()

            # Extract title from the second part (before the dot)
            rest = parts[1].strip()
            if "." in rest:
                title = rest.split(".")[0].strip() + "."
            else:
                title = "No Title"

            return f"{title} {last_name}"

        except Exception:
            return name  # Return original name if parsing fails

    # Apply the transformation
    df_viz["Name"] = df_viz["Name"].apply(extract_title_lastname)

    return df_viz


# %%
# Create visualization DataFrame with reduced names
df_viz = create_viz_dataframe_with_reduced_names(df_train)

# %%
# %%
df_viz.drop(columns=["Ticket", "Cabin", "Embarked"], inplace=True)
# %%
print(df_viz.columns)
# %%
df_viz.drop("PassengerId", axis=1, inplace=True)


# %%
def reduce_sex_column(df):
    """
    Reduce Sex column to just 'M' or 'F' for cleaner visualization.

    'male' → 'M'
    'female' → 'F'
    """
    df_copy = df.copy()

    # Map the values
    sex_mapping = {
        "male": "M",
        "female": "F",
        "Male": "M",  # Handle potential capitalization variations
        "Female": "F",
        "MALE": "M",
        "FEMALE": "F",
    }

    df_copy["Sex"] = df_copy["Sex"].map(sex_mapping)

    # Handle any unmapped values (just in case)
    df_copy["Sex"] = df_copy["Sex"].fillna("Unknown")

    return df_copy


# %%
# Apply sex column reduction
df_viz = reduce_sex_column(df_viz)


# %%
print(df_viz.head(5))


# %%
# create df copy for binning

df_viz_copy = df_viz.copy()

# %%

age_bins = [0, 20, 36, 51, np.inf]
age_labels = ["Kids and Teens", "Adults", "Middle-Aged", "Seniors"]
fare_bins = [0, 8, 15, 30, 60, np.inf]
# Using escaped dollar signs for fare labels
fare_labels = [r"\$", r"\$\$", r"\$\$\$", r"\$\$\$\$", r"\$\$\$\$\$"]

# %%
# Apply binning to df_viz_copy
print("🔄 APPLYING BINS TO df_viz_copy:")
print("=" * 35)

# Create Age bins
df_viz_copy["Age_Bin"] = pd.cut(
    df_viz_copy["Age"],
    bins=age_bins,
    labels=age_labels,
    right=False,  # Left-closed intervals: [0,20), [20,36), etc.
    include_lowest=True,  # Include the lowest value in first bin
)

# Create Fare bins
df_viz_copy["Fare_Bin"] = pd.cut(
    df_viz_copy["Fare"],
    bins=fare_bins,
    labels=fare_labels,
    right=False,
    include_lowest=True,
)

# Show results
print("Age binning results:")
print(df_viz_copy["Age_Bin"].value_counts().sort_index())

print("\nFare binning results:")
print("")
print(df_viz_copy["Fare_Bin"].value_counts().sort_index())

print(f"\n📊 Shape after binning: {df_viz_copy.shape}")
print(f"📋 New columns: {list(df_viz_copy.columns)}")

# %%
# SURVIVAL BAR PLOTS


# Set up the plotting style
plt.style.use("default")
fig, axes = plt.subplots(2, 2, figsize=(16, 12))
fig.suptitle(
    "🚢 Titanic Survival Analysis by Age and Fare Bins", fontsize=16, fontweight="bold"
)

# 1. Survival by Age Bin
age_survival = (
    df_viz_copy.groupby("Age_Bin")["Survived"].agg(["count", "mean"]).reset_index()
)
age_survival["survival_rate"] = age_survival["mean"] * 100

ax1 = axes[0, 0]
bars1 = ax1.bar(
    age_survival["Age_Bin"],
    age_survival["survival_rate"],
    color=["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4"],
)
ax1.set_title("👶➡️🧓 Survival Rate by Age Group", fontweight="bold")
ax1.set_ylabel("Survival Rate (%)")
ax1.set_xlabel("Age Group")
ax1.set_ylim(0, 100)

# Add value labels on bars
for i, bar in enumerate(bars1):
    height = bar.get_height()
    ax1.text(
        bar.get_x() + bar.get_width() / 2.0,
        height + 1,
        f'{height:.1f}%\n(n={age_survival.iloc[i]["count"]})',
        ha="center",
        va="bottom",
        fontsize=10,
    )

# 2. Survival by Fare Bin
fare_survival = (
    df_viz_copy.groupby("Fare_Bin")["Survived"].agg(["count", "mean"]).reset_index()
)
fare_survival["survival_rate"] = fare_survival["mean"] * 100

ax2 = axes[0, 1]
bars2 = ax2.bar(
    fare_survival["Fare_Bin"],
    fare_survival["survival_rate"],
    color=["#FF9999", "#FFB366", "#FFCC66", "#66B2FF", "#9966FF"],
)
ax2.set_title("💰 Survival Rate by Fare Class", fontweight="bold")
ax2.set_ylabel("Survival Rate (%)")
ax2.set_xlabel("Fare Class")
ax2.set_ylim(0, 100)

# Add value labels on bars
for i, bar in enumerate(bars2):
    height = bar.get_height()
    ax2.text(
        bar.get_x() + bar.get_width() / 2.0,
        height + 1,
        f'{height:.1f}%\n(n={fare_survival.iloc[i]["count"]})',
        ha="center",
        va="bottom",
        fontsize=10,
    )

# 3. Combined Heatmap: Age vs Fare
pivot_data = (
    df_viz_copy.groupby(["Age_Bin", "Fare_Bin"])["Survived"]
    .agg(["count", "mean"])
    .reset_index()
)
pivot_survival = pivot_data.pivot(index="Age_Bin", columns="Fare_Bin", values="mean")
pivot_counts = pivot_data.pivot(index="Age_Bin", columns="Fare_Bin", values="count")

ax3 = axes[1, 0]
sns.heatmap(
    pivot_survival * 100,
    annot=True,
    fmt=".1f",
    cmap="RdYlBu_r",
    ax=ax3,
    cbar_kws={"label": "Survival Rate (%)"},
)
ax3.set_title("🎯 Survival Rate Heatmap: Age × Fare", fontweight="bold")
ax3.set_ylabel("Age Group")
ax3.set_xlabel("Fare Class")

# 4. Sample counts for combinations
ax4 = axes[1, 1]
sns.heatmap(
    pivot_counts,
    annot=True,
    fmt="d",
    cmap="Blues",
    ax=ax4,
    cbar_kws={"label": "Sample Count"},
)
ax4.set_title("📊 Sample Sizes: Age × Fare", fontweight="bold")
ax4.set_ylabel("Age Group")
ax4.set_xlabel("Fare Class")

plt.tight_layout()
plt.show()

# %%
# Print detailed survival statistics
print("📈 DETAILED SURVIVAL STATISTICS:")
print("=" * 50)

print("\n👶➡️🧓 BY AGE GROUP:")
for _, row in age_survival.iterrows():
    print(
        f"{row['Age_Bin']:<15}: {row['survival_rate']:.1f}% ({row['count']} passengers)"
    )

print("\n💰 BY FARE CLASS:")
for _, row in fare_survival.iterrows():
    print(
        f"{row['Fare_Bin']:<5}: {row['survival_rate']:.1f}% ({row['count']} passengers)"
    )

print(f"\n🎯 COMBINATION WITH HIGHEST SURVIVAL:")
best_combo = pivot_data.loc[pivot_data["mean"].idxmax()]
print(
    f"{best_combo['Age_Bin']} + {best_combo['Fare_Bin']}: {best_combo['mean']*100:.1f}% ({best_combo['count']} passengers)"
)

print(f"\n💔 COMBINATION WITH LOWEST SURVIVAL:")
worst_combo = pivot_data.loc[pivot_data["mean"].idxmin()]
print(
    f"{worst_combo['Age_Bin']} + {worst_combo['Fare_Bin']}: {worst_combo['mean']*100:.1f}% ({worst_combo['count']} passengers)"
)

# %%
